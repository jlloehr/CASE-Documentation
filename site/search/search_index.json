{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CASE Ontology Cyber-investigation Analysis Standard Expression (CASE) Ontology http://caseontology.org Documentation This website is used for documenting the ReadMe files from each repository on https://github.com/casework","title":"Home"},{"location":"#case-ontology","text":"Cyber-investigation Analysis Standard Expression (CASE) Ontology http://caseontology.org","title":"CASE Ontology"},{"location":"#documentation","text":"This website is used for documenting the ReadMe files from each repository on https://github.com/casework","title":"Documentation"},{"location":"CASE/","text":"Cyber-investigation Analysis Standard Expression (CASE) Read the Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO . Examples in this Repository These will eventually be moved to the Wiki (likely Mapping Guide ). Mapping notes & respective JSON-LD output: - Bulk Extractor Forensic Path ( info ) - Call Log - Device - Email - EXIF Data - Files ( info ) - Forensic Lifecycle - Location - Message - Multipart File ( info ) - Oresteia ( info ) - Raw Data - Reconstructed File ( info ) - SMS and Contacts I have a question! Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository.","title":"CASE"},{"location":"CASE/#cyber-investigation-analysis-standard-expression-case","text":"Read the Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO .","title":"Cyber-investigation Analysis Standard Expression (CASE)"},{"location":"CASE/#examples-in-this-repository","text":"These will eventually be moved to the Wiki (likely Mapping Guide ). Mapping notes & respective JSON-LD output: - Bulk Extractor Forensic Path ( info ) - Call Log - Device - Email - EXIF Data - Files ( info ) - Forensic Lifecycle - Location - Message - Multipart File ( info ) - Oresteia ( info ) - Raw Data - Reconstructed File ( info ) - SMS and Contacts","title":"Examples in this Repository"},{"location":"CASE/#i-have-a-question","text":"Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository.","title":"I have a question!"},{"location":"api/","text":"Cyber-investigation Analysis Standard Expression (CASE) Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO . CASE Python API Quickstart python setup.py install Import case.py and NLG.py into the file you plan to implement CASE. NLG.py & CASE.py The Natural Language Glossary (NLG) is an alphabetical list of types of CASE classes (categories of CASE types). The functions in NLG.py create CASE objects (instances of such types) while automatically checking ontology and type. The API ( case.py ) could be used directly to create non-typed objects if ontology and type checking are not requirements. However, we advise against this to maintain consistency across community usage of the ontology. Note that different versions of the NLG exist for different realizations of the Unified Cyber Ontology. The human legible NLG corresponding to this version of CASE (one realization of UCO) can be found here: https://casework.github.io/case/case-v0.1.0-natural-language-glossary.html The API wraps RDFLib for a JSON-LD schematic. This verison is only directly adoptable via Python but JSON-LD is also supported in Javascript, PHP, Ruby, Java, C#, and Go. Examples The example folder contains a slimmed down NLG, for an understanding of some of the basic function variations that exist, as well as a template for all types of conditions checked by the NLG functions. NLG Autogeneration (only for CASE team to manage API) Note that currently the script will not function properly because v0.1.0 of CASE does not have a cardinality field for each object and property. When this is added the script will be stable and new_NLG.py in the outputs folder will not have missing body checks. Dependency: Ontospy When CASE's base specification (Turtle files) changes this script can be used to automatically regenerate the NLG.py functions for the next release. Therefore, this should only be run by the CASE team - eventually it will move to a new (possibly backend) repo where a CI/CD framework is placed. To run Ontospy must be installed, and the Turtle files combined into one. Then run python autogen-api.py <path-to-turtle-file> . (Note there is a ToDo list in the autogen-api.py file so that it can align with changes that may occur in the API, as well as other add new features such as better CLI flags, a CSV export of all object names and properties for the Ontologists and Mappers teams to use for quick reference, etc.) I have a question! Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository.","title":"CASE-API-Python"},{"location":"api/#cyber-investigation-analysis-standard-expression-case","text":"Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO .","title":"Cyber-investigation Analysis Standard Expression (CASE)"},{"location":"api/#case-python-api","text":"","title":"CASE Python API"},{"location":"api/#quickstart","text":"python setup.py install Import case.py and NLG.py into the file you plan to implement CASE.","title":"Quickstart"},{"location":"api/#nlgpy-casepy","text":"The Natural Language Glossary (NLG) is an alphabetical list of types of CASE classes (categories of CASE types). The functions in NLG.py create CASE objects (instances of such types) while automatically checking ontology and type. The API ( case.py ) could be used directly to create non-typed objects if ontology and type checking are not requirements. However, we advise against this to maintain consistency across community usage of the ontology. Note that different versions of the NLG exist for different realizations of the Unified Cyber Ontology. The human legible NLG corresponding to this version of CASE (one realization of UCO) can be found here: https://casework.github.io/case/case-v0.1.0-natural-language-glossary.html The API wraps RDFLib for a JSON-LD schematic. This verison is only directly adoptable via Python but JSON-LD is also supported in Javascript, PHP, Ruby, Java, C#, and Go.","title":"NLG.py &amp; CASE.py"},{"location":"api/#examples","text":"The example folder contains a slimmed down NLG, for an understanding of some of the basic function variations that exist, as well as a template for all types of conditions checked by the NLG functions.","title":"Examples"},{"location":"api/#nlg-autogeneration-only-for-case-team-to-manage-api","text":"Note that currently the script will not function properly because v0.1.0 of CASE does not have a cardinality field for each object and property. When this is added the script will be stable and new_NLG.py in the outputs folder will not have missing body checks. Dependency: Ontospy When CASE's base specification (Turtle files) changes this script can be used to automatically regenerate the NLG.py functions for the next release. Therefore, this should only be run by the CASE team - eventually it will move to a new (possibly backend) repo where a CI/CD framework is placed. To run Ontospy must be installed, and the Turtle files combined into one. Then run python autogen-api.py <path-to-turtle-file> . (Note there is a ToDo list in the autogen-api.py file so that it can align with changes that may occur in the API, as well as other add new features such as better CLI flags, a CSV export of all object names and properties for the Ontologists and Mappers teams to use for quick reference, etc.)","title":"NLG Autogeneration (only for CASE team to manage API)"},{"location":"api/#i-have-a-question","text":"Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository.","title":"I have a question!"},{"location":"mappings/","text":"Cyber-investigation Analysis Standard Expression (CASE) Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO . CASE-Mappings Current partial mappings (eventually these will be split into fully-completed and partially-completed): - BulkExtractor - Cellebrite - NSRL - Sleuthkit I have a question! Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository.","title":"CASE-Mappings"},{"location":"mappings/#cyber-investigation-analysis-standard-expression-case","text":"Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO .","title":"Cyber-investigation Analysis Standard Expression (CASE)"},{"location":"mappings/#case-mappings","text":"Current partial mappings (eventually these will be split into fully-completed and partially-completed): - BulkExtractor - Cellebrite - NSRL - Sleuthkit","title":"CASE-Mappings"},{"location":"mappings/#i-have-a-question","text":"Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository.","title":"I have a question!"},{"location":"ontospy/","text":"Cyber-investigation Analysis Standard Expression (CASE) Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO . OntoSpy Note: OntoSpy was forked so that a static version of the tool could be obtained. The Python API's autogeneration relies on this static version for parsing purposes (v0.1.0). In the future if this fork is to be updated from the original lambdamusic repository it may require updating the scripts. Thus, when using OntoSpy for mapping or ontological purposes we suggest using the original repository. Python toolkit for inspecting linked data knowledge models AKA ontologies or vocabularies. Description OntoSpy is a lightweight Python library and command line tool for inspecting and visualizing vocabularies encoded using W3C Semantic Web standards, that is, RDF or any of its dialects (RDFS, OWL, SKOS). The basic workflow is simple: load a graph by instantiating the Ontospy class with a file containing RDFS, OWL or SKOS definitions. You get back an object that lets you interrogate the ontology. That's all! The same functionalities are accessible also via a command line application ( ontospy-shell ). This is an interactive environment (like a repl) that allows to load ontologies from a local repository, interrogate them and cache them so that they can be quickly reloaded for inspection later on. More info https://github.com/lambdamusic/OntoSpy/wiki I have a question! Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository. This repository is a \"preserved\" fork that is used for backend autogeneration, etc. All feature/bug requests for the core functionality of the tool should be reported to the original repository. However, if it is something that is specific to CASE we may add support a patch here.","title":"OntoSpy"},{"location":"ontospy/#cyber-investigation-analysis-standard-expression-case","text":"Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO .","title":"Cyber-investigation Analysis Standard Expression (CASE)"},{"location":"ontospy/#ontospy","text":"Note: OntoSpy was forked so that a static version of the tool could be obtained. The Python API's autogeneration relies on this static version for parsing purposes (v0.1.0). In the future if this fork is to be updated from the original lambdamusic repository it may require updating the scripts. Thus, when using OntoSpy for mapping or ontological purposes we suggest using the original repository. Python toolkit for inspecting linked data knowledge models AKA ontologies or vocabularies.","title":"OntoSpy"},{"location":"ontospy/#description","text":"OntoSpy is a lightweight Python library and command line tool for inspecting and visualizing vocabularies encoded using W3C Semantic Web standards, that is, RDF or any of its dialects (RDFS, OWL, SKOS). The basic workflow is simple: load a graph by instantiating the Ontospy class with a file containing RDFS, OWL or SKOS definitions. You get back an object that lets you interrogate the ontology. That's all! The same functionalities are accessible also via a command line application ( ontospy-shell ). This is an interactive environment (like a repl) that allows to load ontologies from a local repository, interrogate them and cache them so that they can be quickly reloaded for inspection later on.","title":"Description"},{"location":"ontospy/#more-info","text":"https://github.com/lambdamusic/OntoSpy/wiki","title":"More info"},{"location":"ontospy/#i-have-a-question","text":"Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository. This repository is a \"preserved\" fork that is used for backend autogeneration, etc. All feature/bug requests for the core functionality of the tool should be reported to the original repository. However, if it is something that is specific to CASE we may add support a patch here.","title":"I have a question!"},{"location":"plaso/","text":"Cyber-investigation Analysis Standard Expression (CASE) Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO . CASE Plaso implementation Note: This POC is not ontology-correct! However, it attempts to adhere to v0.1.0 of CASE. This is an implementation of exporting plaso storage files into an RDF graph following the CASE ontology. Install Install the case API git clone https://github.com/casework/CASE-Python-API.git pip install CASE-Python-API Then clone and install requirements.txt git clone https://github.com/casework/CASE-Plaso-Implementation.git cd CASE-Plaso-Implementation pip install -r requirements.txt Usage Pass the storage file created by the log2timeline tool into the \"case_plaso\" tool: python case_plaso_export.py myimage.bin.plaso output.json --format json-ld I have a question! Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository.","title":"CASE-Implementation-Plaso"},{"location":"plaso/#cyber-investigation-analysis-standard-expression-case","text":"Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO .","title":"Cyber-investigation Analysis Standard Expression (CASE)"},{"location":"plaso/#case-plaso-implementation","text":"Note: This POC is not ontology-correct! However, it attempts to adhere to v0.1.0 of CASE. This is an implementation of exporting plaso storage files into an RDF graph following the CASE ontology.","title":"CASE Plaso implementation"},{"location":"plaso/#install","text":"Install the case API git clone https://github.com/casework/CASE-Python-API.git pip install CASE-Python-API Then clone and install requirements.txt git clone https://github.com/casework/CASE-Plaso-Implementation.git cd CASE-Plaso-Implementation pip install -r requirements.txt","title":"Install"},{"location":"plaso/#usage","text":"Pass the storage file created by the log2timeline tool into the \"case_plaso\" tool: python case_plaso_export.py myimage.bin.plaso output.json --format json-ld","title":"Usage"},{"location":"plaso/#i-have-a-question","text":"Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository.","title":"I have a question!"},{"location":"rdfdiff/","text":"Cyber-investigation Analysis Standard Expression (CASE) Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO . RDFDiff An RDF and ontology trouble shooter for CASE and UCO. What it does RDFDiff takes output of a tool (JSON/JSON-LD/XML/etc...) and attempts to validate it against a RDF based ontology (OWL/N3/ttl). Any entry in the tool's output that is NOT in the Ontology (specified via CLI) will display an error. CLI arugments can be added to cause a debugger to start so you may explore the graph to view where things went wrong. How it works rdfdiff.py will read in an RDF vocabulary defined via -g (glossary) to check a custom tool's output against via -i . The Python library rdflib is used to turn the RDF schema into tripples which are then broken into three lists; subject, predicate and object. Finally, each element of the tools ouput within the tool's subject and predicate are checked againast the glossary's subject and predicate to confirm the existence of these RDF elements. If an element is found or not found it is displayed to the user. BNodes are skipped as they have no appropriate label in RDF and should not be used to verify an ontology. Why not SPARQL? In order to facilitate a broad range of ontologies and custom tool outputs, SPARQL queries are not used for verification. CASE and UCO allow for robust flexibility and this tool aims to compliment this approach. Installation sudo pip install -r requirements.txt Unit Tests The ontology validator is heavily reliant on 3rd pary libraries, primarily RDFlib. RDFLib is under heavy development. To ensure compatability with new releases unit tests have been written to check for consistency. Run unit tests: cd tests; python test_verifier.py; CLI Usage -g : Define the RDF schema (aka glossary) in use for your ontology. -gf : Define the format the schema is in. By default validator.py will try to auto-guess based on extension. However, if additional plugins are installed it is best practice to manually specify it. -i : The external tool's output you want to verify the ontology against. -if : Define RDF schema for tool data that's being injested. --debug : Break on errors that occur within --verify . -tg : Print subject, predicate, object for each graph within tool schema. -gg : Print subject, predicate, object for each graph within glossary schema. CLI Example Check for inconsistencies between graphs: rdfdiff.py -g case.ttl -gf turtle -i output.json-ld -if json-ld --verify=1 Check for inconsistencies between graphs with color output: rdfdiff.py -g case.ttl -gf turtle -i output.json-ld -if json-ld --verify=1 --color=1 Enter debug mode. This will cause a PDB session to open when an inconsistency is met. This can be useful for manually navigating the RDF graph in Python.: rdfdiff.py -g case.ttl -gf turtle -i output.json-ld -if json-ld --verify=1 --debug=1 Print all graphs for tool's schema. rdfdiff.py -g case.ttl -gf turtle -i output.json-ld -if json-ld -tg=1 Print all graphs for ontology's schema. rdfdiff.py -g case.ttl -gf turtle -i output.json-ld -if json-ld -gg=1 I have a question! Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository. If/when you run into an issue with a given RDF schema format or the verifier.py script, please open an issue with the error and as much technical detail as you can provide.","title":"RDFDiff"},{"location":"rdfdiff/#cyber-investigation-analysis-standard-expression-case","text":"Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO .","title":"Cyber-investigation Analysis Standard Expression (CASE)"},{"location":"rdfdiff/#rdfdiff","text":"An RDF and ontology trouble shooter for CASE and UCO.","title":"RDFDiff"},{"location":"rdfdiff/#what-it-does","text":"RDFDiff takes output of a tool (JSON/JSON-LD/XML/etc...) and attempts to validate it against a RDF based ontology (OWL/N3/ttl). Any entry in the tool's output that is NOT in the Ontology (specified via CLI) will display an error. CLI arugments can be added to cause a debugger to start so you may explore the graph to view where things went wrong.","title":"What it does"},{"location":"rdfdiff/#how-it-works","text":"rdfdiff.py will read in an RDF vocabulary defined via -g (glossary) to check a custom tool's output against via -i . The Python library rdflib is used to turn the RDF schema into tripples which are then broken into three lists; subject, predicate and object. Finally, each element of the tools ouput within the tool's subject and predicate are checked againast the glossary's subject and predicate to confirm the existence of these RDF elements. If an element is found or not found it is displayed to the user. BNodes are skipped as they have no appropriate label in RDF and should not be used to verify an ontology.","title":"How it works"},{"location":"rdfdiff/#why-not-sparql","text":"In order to facilitate a broad range of ontologies and custom tool outputs, SPARQL queries are not used for verification. CASE and UCO allow for robust flexibility and this tool aims to compliment this approach.","title":"Why not SPARQL?"},{"location":"rdfdiff/#installation","text":"sudo pip install -r requirements.txt","title":"Installation"},{"location":"rdfdiff/#unit-tests","text":"The ontology validator is heavily reliant on 3rd pary libraries, primarily RDFlib. RDFLib is under heavy development. To ensure compatability with new releases unit tests have been written to check for consistency. Run unit tests: cd tests; python test_verifier.py;","title":"Unit Tests"},{"location":"rdfdiff/#cli-usage","text":"-g : Define the RDF schema (aka glossary) in use for your ontology. -gf : Define the format the schema is in. By default validator.py will try to auto-guess based on extension. However, if additional plugins are installed it is best practice to manually specify it. -i : The external tool's output you want to verify the ontology against. -if : Define RDF schema for tool data that's being injested. --debug : Break on errors that occur within --verify . -tg : Print subject, predicate, object for each graph within tool schema. -gg : Print subject, predicate, object for each graph within glossary schema.","title":"CLI Usage"},{"location":"rdfdiff/#cli-example","text":"Check for inconsistencies between graphs: rdfdiff.py -g case.ttl -gf turtle -i output.json-ld -if json-ld --verify=1 Check for inconsistencies between graphs with color output: rdfdiff.py -g case.ttl -gf turtle -i output.json-ld -if json-ld --verify=1 --color=1 Enter debug mode. This will cause a PDB session to open when an inconsistency is met. This can be useful for manually navigating the RDF graph in Python.: rdfdiff.py -g case.ttl -gf turtle -i output.json-ld -if json-ld --verify=1 --debug=1 Print all graphs for tool's schema. rdfdiff.py -g case.ttl -gf turtle -i output.json-ld -if json-ld -tg=1 Print all graphs for ontology's schema. rdfdiff.py -g case.ttl -gf turtle -i output.json-ld -if json-ld -gg=1","title":"CLI Example"},{"location":"rdfdiff/#i-have-a-question","text":"Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository. If/when you run into an issue with a given RDF schema format or the verifier.py script, please open an issue with the error and as much technical detail as you can provide.","title":"I have a question!"},{"location":"volatility/","text":"Cyber-investigation Analysis Standard Expression (CASE) Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO . Proof-of-Concept CASE Volatility Plugins Note: This POC is not ontology-correct! However, it attempts to adhere to v0.1.0 of CASE. This repository contains a sub-set of Volatility plugins that produce output in the CASE format. These plugins have been taken from core Volatility plugins and adapted the output to produce CASE JSON-LD. These currently are proof-of-concept only , and may not fully comply to the CASE ontology as it is an evolving standard. This repository takes the following plugins from the Volatility framework and converts the output to CASE format: handles.py procdump.py cmdline.py All Volatility work belongs to their respective authors which can be found here . Installation of 3rd Party Libraries CASE Python Library . Volatility Python library . Running Custom PoC Plugins CASE Handle List from Memory Image: vol.py --plugins='volplugs/src/' -f memory_images/memory.img --profile WinXPSP2x86 casehandles CASE Procdump: vol.py --plugins='volplugs/src/' -f memory_images/memory.img caseprocdump --dump-dir dumpdir CASE Commandline dumping: vol.py --plugins='volplugs/src/' -f memory_images/memory.img casecmdline I have a question! Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository.","title":"CASE-Implementation-Volatility"},{"location":"volatility/#cyber-investigation-analysis-standard-expression-case","text":"Read the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO .","title":"Cyber-investigation Analysis Standard Expression (CASE)"},{"location":"volatility/#proof-of-concept-case-volatility-plugins","text":"Note: This POC is not ontology-correct! However, it attempts to adhere to v0.1.0 of CASE. This repository contains a sub-set of Volatility plugins that produce output in the CASE format. These plugins have been taken from core Volatility plugins and adapted the output to produce CASE JSON-LD. These currently are proof-of-concept only , and may not fully comply to the CASE ontology as it is an evolving standard. This repository takes the following plugins from the Volatility framework and converts the output to CASE format: handles.py procdump.py cmdline.py All Volatility work belongs to their respective authors which can be found here .","title":"Proof-of-Concept CASE Volatility Plugins"},{"location":"volatility/#installation-of-3rd-party-libraries","text":"CASE Python Library . Volatility Python library .","title":"Installation  of 3rd Party Libraries"},{"location":"volatility/#running-custom-poc-plugins","text":"CASE Handle List from Memory Image: vol.py --plugins='volplugs/src/' -f memory_images/memory.img --profile WinXPSP2x86 casehandles CASE Procdump: vol.py --plugins='volplugs/src/' -f memory_images/memory.img caseprocdump --dump-dir dumpdir CASE Commandline dumping: vol.py --plugins='volplugs/src/' -f memory_images/memory.img casecmdline","title":"Running Custom PoC Plugins"},{"location":"volatility/#i-have-a-question","text":"Before you post a Github issue or send an email ensure you've done this checklist: Determined scope of your task. It is not necessary for most parties to understand all aspects of the ontology, mapping methods, and supporting tools. Familiarize yourself with the labels and search the Issues tab . Typically, only light-blue and red labels should be used by non-admin Github users while the others should be used by CASE Github admins. All but the red Project labels are found in every casework repository.","title":"I have a question!"}]}